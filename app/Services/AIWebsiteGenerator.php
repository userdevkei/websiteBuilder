<?php

// 1. First, create the AI Service Class
// app/Services/AIWebsiteGenerator.php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Exception;

class AIWebsiteGenerator
{
    private $apiKey;
    private $baseUrl;
    private $model;

    public function __construct()
    {
        $this->apiKey = get_option('open_ai_key'); // or claude, gemini
        $this->baseUrl = 'https://api.openai.com/v1';
        $this->model = 'gpt-4o';
    }
    /**
     * Generate website HTML, CSS, and JS based on description
     */
    public function generateWebsite($description, $options = [])
    {
        try {
            if (empty($description)) {
                throw new Exception('Description cannot be empty');
            }

            $prompt = $this->buildPrompt($description, $options);
            Log::info('AI Prompt built:', ['prompt' => substr($prompt, 0, 200) . '...']);

            // Prepare API request payload with correct parameters for newer models
            $payload = [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => $this->getSystemPrompt()
                    ],
                    [
                        'role' => 'user',
                        'content' => $prompt
                    ]
                ],
                'temperature' => 0.7,
            ];

            // Use the correct token parameter based on model
            if ($this->isNewerModel($this->model)) {
                $payload['max_completion_tokens'] = 4000;
            } else {
                $payload['max_tokens'] = 4000;
            }

            Log::info('Making OpenAI API request', [
                'model' => $this->model,
                'base_url' => $this->baseUrl,
                'payload_keys' => array_keys($payload)
            ]);

            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->timeout(120)->post($this->baseUrl . '/chat/completions', $payload);

            Log::info('OpenAI API Response Status:', ['status' => $response->status()]);

            if (!$response->successful()) {
                $errorBody = $response->body();
                Log::error('OpenAI API request failed:', [
                    'status' => $response->status(),
                    'body' => $errorBody
                ]);
                throw new Exception('AI API request failed: ' . $errorBody);
            }

            $result = $response->json();
            Log::info('OpenAI API Response received successfully');

            if (!isset($result['choices']) || !isset($result['choices'][0]) || !isset($result['choices'][0]['message'])) {
                Log::error('Unexpected API response structure:', ['result' => $result]);
                throw new Exception('Unexpected API response structure');
            }

            $generatedCode = $result['choices'][0]['message']['content'];

            if (empty($generatedCode)) {
                Log::error('Empty generated code received');
                throw new Exception('No content generated by AI');
            }

            return $this->parseGeneratedCode($generatedCode);
        } catch (\Throwable $e) {
            \Log::error('AI Website error: ' . $e->getMessage(), ['trace' => $e->getTraceAsString()]);

            return response()->json([
                'success' => false,
                'message' => 'Server error: ' . $e->getMessage()
            ], 500);
        }

        /*} catch (Exception $e) {
            Log::error('AI Website Generation failed: ' . $e->getMessage(), [
                'trace' => $e->getTraceAsString()
            ]);
            throw new Exception('Failed to generate website: ' . $e->getMessage());
        }*/
    }

    /**
     * Check if model is a newer one that requires max_completion_tokens
     */
    private function isNewerModel($model)
    {
        $newerModels = [
            'gpt-4o',
            'gpt-4o-mini',
            'gpt-4-turbo',
            'gpt-4-turbo-preview',
            'gpt-4-1106-preview',
            'gpt-4-0125-preview',
            'chatgpt-4o-latest',
            'gpt-4o-2024-05-13',
            'gpt-4o-2024-08-06',
            'gpt-4o-mini-2024-07-18'
        ];

        return in_array(strtolower($model), array_map('strtolower', $newerModels)) ||
            str_contains(strtolower($model), 'gpt-4o') ||
            str_contains(strtolower($model), 'turbo');
    }

    /**
     * Build the prompt for AI with validation
     */
    private function buildPrompt($description, $options)
    {
        $colorScheme = $options['color_scheme'] ?? 'modern blue and white';
        $style = $options['style'] ?? 'modern and clean';
        $industry = $options['industry'] ?? 'general business';
        $pages = $options['pages'] ?? ['home'];

        if (!is_array($pages) || empty($pages)) {
            $pages = ['home'];
        }

        $prompt = "Create a complete website for: {$description}

Requirements:
- Industry: {$industry}
- Style: {$style}
- Color Scheme: {$colorScheme}
- Pages: " . implode(', ', $pages) . "
- Responsive design (mobile-friendly)
- Modern CSS with flexbox/grid
- Include interactive elements with JavaScript
- Use semantic HTML5
- Include placeholder images and content
- Add hover effects and animations
- Include contact forms where appropriate

Please provide:
1. Complete HTML structure
2. CSS styles (embedded in <style> tags)
3. JavaScript functionality (embedded in <script> tags)  
4. Make it production-ready and visually appealing

IMPORTANT: Return ONLY the complete HTML document with embedded CSS and JavaScript. Do not include any explanations or markdown formatting.";

        return $prompt;
    }

    /**
     * System prompt for AI
     */
    private function getSystemPrompt()
    {
        return "You are an expert web developer and designer. Create complete, modern, responsive websites with clean HTML, CSS, and JavaScript.

Guidelines:
- Use semantic HTML5 elements
- Write modern CSS with flexbox/grid
- Include responsive design patterns
- Add smooth animations and transitions
- Use modern JavaScript (ES6+)
- Include proper meta tags and SEO elements
- Generate realistic placeholder content
- Create visually appealing designs
- Ensure accessibility standards
- Return only the complete HTML code with embedded CSS and JS

Format your response as a complete HTML document that can be directly used. Do not include markdown code blocks or explanations.";
    }

    /**
     * Parse the generated code from AI response
     */
    private function parseGeneratedCode($generatedCode)
    {
        try {
            $html = trim($generatedCode);

            // Remove markdown code blocks if present
            $html = preg_replace('/```html\s*/', '', $html);
            $html = preg_replace('/```\s*$/', '', $html);
            $html = preg_replace('/^```/', '', $html);

            // Validate that we have HTML
            if (!str_contains(strtolower($html), '<html') && !str_contains(strtolower($html), '<!doctype')) {
                Log::warning('Generated content does not appear to be HTML:', ['content' => substr($html, 0, 200)]);
                $html = $this->wrapInHTMLStructure($html);
            }

            // Extract CSS and JS for compatibility
            $css = '';
            $js = '';

            if (preg_match('/<style[^>]*>(.*?)<\/style>/s', $html, $matches)) {
                $css = $matches[1];
            }

            if (preg_match('/<script[^>]*>(.*?)<\/script>/s', $html, $matches)) {
                $js = $matches[1];
            }

            Log::info('Successfully parsed generated code', [
                'html_length' => strlen($html),
                'css_extracted' => !empty($css),
                'js_extracted' => !empty($js)
            ]);

            return [
                'html' => $html,
                'css' => $css,
                'js' => $js,
                'success' => true
            ];

        } catch (Exception $e) {
            Log::error('Error parsing generated code: ' . $e->getMessage());
            throw new Exception('Failed to parse generated code: ' . $e->getMessage());
        }
    }

    /**
     * Wrap content in basic HTML structure if needed
     */
    private function wrapInHTMLStructure($content)
    {
        return "<!DOCTYPE html>
<html lang=\"en\">
<head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>AI Generated Website</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
    </style>
</head>
<body>
    {$content}
</body>
</html>";
    }

    /**
     * Test API connection with correct parameters
     */
    public function testConnection()
    {
        try {
            $payload = [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'user',
                        'content' => 'Hello, can you respond with just "Connection successful"?'
                    ]
                ],
            ];

            // Use correct token parameter
            if ($this->isNewerModel($this->model)) {
                $payload['max_completion_tokens'] = 10;
            } else {
                $payload['max_tokens'] = 10;
            }

            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->timeout(30)->post($this->baseUrl . '/chat/completions', $payload);

            if ($response->successful()) {
                Log::info('AI API connection test successful');
                return ['success' => true, 'message' => 'Connection successful'];
            } else {
                Log::error('AI API connection test failed', ['response' => $response->body()]);
                return ['success' => false, 'message' => 'Connection failed: ' . $response->body()];
            }

        } catch (Exception $e) {
            Log::error('AI API connection test error: ' . $e->getMessage());
            return ['success' => false, 'message' => 'Connection error: ' . $e->getMessage()];
        }
    }

    /**
     * Generate website sections with correct parameters
     */
    public function generateSection($description, $sectionType = 'general')
    {
        try {
            $prompt = "Create a {$sectionType} section for a website: {$description}
            
Please provide only the HTML, CSS, and JavaScript code for this specific section.
Make it modern, responsive, and visually appealing.
Include inline CSS and JavaScript if needed.
Return only the code without explanations or markdown formatting.";

            $payload = [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => 'You are a web developer. Create beautiful, responsive website sections with HTML, CSS, and JavaScript. Return only code without explanations.'
                    ],
                    [
                        'role' => 'user',
                        'content' => $prompt
                    ]
                ],
                'temperature' => 0.7,
            ];

            // Use correct token parameter
            if ($this->isNewerModel($this->model)) {
                $payload['max_completion_tokens'] = 2000;
            } else {
                $payload['max_tokens'] = 2000;
            }

            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->timeout(60)->post($this->baseUrl . '/chat/completions', $payload);

            if (!$response->successful()) {
                throw new Exception('AI API request failed: ' . $response->body());
            }

            $result = $response->json();

            if (!isset($result['choices'][0]['message']['content'])) {
                throw new Exception('Invalid API response structure');
            }

            return $result['choices'][0]['message']['content'];

        } catch (Exception $e) {
            Log::error('AI Section Generation failed: ' . $e->getMessage());
            throw new Exception('Failed to generate section: ' . $e->getMessage());
        }
    }

    /**
     * Get model information
     */
    public function getModelInfo()
    {
        return [
            'model' => $this->model,
            'is_newer_model' => $this->isNewerModel($this->model),
            'token_parameter' => $this->isNewerModel($this->model) ? 'max_completion_tokens' : 'max_tokens'
        ];
    }
}